import kotlin.random.Random

// –û—Ä—É–∂–∏–µ
data class Weapon(val name: String, val attack: Int)

// –ë—Ä–æ–Ω—è
class Armor(val name: String, val defense: Int, var durability: Int) {
    fun takeDamage(damage: Int): Int {
        if (durability <= 0) return damage // –±—Ä–æ–Ω—è —Å–ª–æ–º–∞–Ω–∞

        val blocked = minOf(defense, damage)
        durability -= blocked / 2 // –ø—Ä–æ—á–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è

        return damage - blocked
    }

    fun isBroken(): Boolean = durability <= 0
}

// –ò–≥—Ä–æ–≤–æ–π –∫–ª–∞—Å—Å
abstract class PlayerClass(
    val name: String,
    val maxHealth: Int,
    val armor: Armor,
    val weapon: Weapon
) {
    var health: Int = maxHealth
        private set

    fun takeDamage(damage: Int) {
        val actualDamage = armor.takeDamage(damage)
        health -= actualDamage
        if (health < 0) health = 0
    }

    fun attack(): Int {
        // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ 1-6 –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –∞—Ç–∞–∫–µ –æ—Ä—É–∂–∏—è
        return weapon.attack + Random.nextInt(1, 7)
    }

    fun isAlive(): Boolean = health > 0

    fun reset() {
        health = maxHealth
        armor.durability = 50 // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏
    }

    fun getStatus(): String {
        val armorStatus = if (armor.isBroken()) "–°–õ–û–ú–ê–ù–ê" else "${armor.durability}"
        return "$name: –ó–¥–æ—Ä–æ–≤—å–µ $health/$maxHealth, –ë—Ä–æ–Ω—è: $armorStatus"
    }
}

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
class Paladin : PlayerClass(
    "–ü–∞–ª–∞–¥–∏–Ω",
    120,
    Armor("–¢—è–∂–µ–ª–∞—è –±—Ä–æ–Ω—è", 8, 50),
    Weapon("–ú–µ—á", 12)
)

class Rogue : PlayerClass(
    "–†–∞–∑–±–æ–π–Ω–∏–∫",
    90,
    Armor("–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", 5, 50),
    Weapon("–ö–∏–Ω–∂–∞–ª—ã", 18)
)

class Archer : PlayerClass(
    "–õ—É—á–Ω–∏–∫",
    70,
    Armor("–õ–µ–≥–∫–∞—è –±—Ä–æ–Ω—è", 3, 50),
    Weapon("–õ—É–∫", 22)
)

// –ò–≥—Ä–æ–∫
class Player(val name: String, val playerClass: PlayerClass) {
    fun makeTurn(opponent: Player): String {
        val attackValue = playerClass.attack()
        val opponentDefense = opponent.playerClass.armor.defense

        opponent.playerClass.takeDamage(attackValue)

        return "$name (${playerClass.name}) –∞—Ç–∞–∫—É–µ—Ç –Ω–∞ $attackValue —É—Ä–æ–Ω–∞. " +
                "${opponent.name} –ø–æ–ª—É—á–∞–µ—Ç ${attackValue - opponentDefense} —É—Ä–æ–Ω–∞ –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏."
    }

    fun isAlive(): Boolean = playerClass.isAlive()

    fun getStatus(): String = playerClass.getStatus()

    fun reset() {
        playerClass.reset()
    }
}

// –ò–≥—Ä–∞
class DuelGame {
    private lateinit var player1: Player
    private lateinit var player2: Player
    private var currentPlayer: Player? = null

    fun startGame() {
        println("–î—É—ç–ª—å")
        println("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:")
        println("1. –ü–∞–ª–∞–¥–∏–Ω (–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —Å–ª–∞–±–∞—è –∞—Ç–∞–∫–∞, —Ç—è–∂–µ–ª–∞—è –±—Ä–æ–Ω—è)")
        println("2. –†–∞–∑–±–æ–π–Ω–∏–∫ (—Å—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ, —Å–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞, —Å—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è)")
        println("3. –õ—É—á–Ω–∏–∫ (–º–∞–ª–æ –∑–¥–æ—Ä–æ–≤—å—è, –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞, –ª–µ–≥–∫–∞—è –±—Ä–æ–Ω—è)")

        player1 = createPlayer(1)
        player2 = createPlayer(2)

        // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º, –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        currentPlayer = if (Random.nextBoolean()) player1 else player2

        println("\n–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥—É—ç–ª—å –º–µ–∂–¥—É:")
        println("${player1.name} - ${player1.playerClass.name}")
        println("${player2.name} - ${player2.playerClass.name}")
        println("–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: ${currentPlayer!!.name}")
        println("‚àí".repeat(50))

        gameLoop()
    }

    private fun createPlayer(playerNumber: Int): Player {
        print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ $playerNumber: ")
        val name = readLine() ?: "–ò–≥—Ä–æ–∫$playerNumber"

        var classChoice: Int
        do {
            print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è $name (1-3): ")
            classChoice = readLine()?.toIntOrNull() ?: 0
        } while (classChoice !in 1..3)

        val playerClass = when (classChoice) {
            1 -> Paladin()
            2 -> Rogue()
            3 -> Archer()
            else -> Paladin()
        }

        return Player(name, playerClass)
    }

    private fun gameLoop() {
        var turn = 1

        while (player1.isAlive() && player2.isAlive()) {
            println("\n--- –•–æ–¥ $turn ---")
            println(player1.getStatus())
            println(player2.getStatus())
            println()

            val attacker = currentPlayer!!
            val defender = if (currentPlayer == player1) player2 else player1

            // –•–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            val result = attacker.makeTurn(defender)
            println(result)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–º–µ—Ä –ª–∏ –∑–∞—â–∏—Ç–Ω–∏–∫
            if (!defender.isAlive()) {
                println("\n‚öîÔ∏è ${defender.name} –ø–∞–ª –≤ –±–æ—é!")
                println("üèÜ ${attacker.name} –ø–æ–±–µ–∂–¥–∞–µ—Ç!")
                break
            }

            // –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            currentPlayer = defender
            turn++

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
            println("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            readLine()
        }

        if (!player1.isAlive() && !player2.isAlive()) {
            println("\nüíÄ –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–∞–ª–∏ –≤ –±–æ—é! –ù–∏—á—å—è!")
        }

        askForRematch()
    }

    private fun askForRematch() {
        println("\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç)")
        val answer = readLine()?.lowercase()

        if (answer == "–¥–∞" || answer == "–¥" || answer == "y" || answer == "yes") {
            player1.reset()
            player2.reset()
            println("\n" + "=".repeat(50))
            startGame()
        } else {
            println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
fun main() {
    val game = DuelGame()
    game.startGame()
}